#!/usr/bin/env python3

import sys
from lib.Topology import Topology
from lib.Configuration import Configuration
from lib.AmberTopologyWriter import AmberTopologyWriter
from lib.AmberConfigurationWriter import AmberConfigurationWriter
import argparse

parser = argparse.ArgumentParser(
        description="Convert Gromos simulation inputs to Amber inputs.",
        allow_abbrev=False
        )
 
solvent_groups = parser.add_mutually_exclusive_group()

solvent_groups.add_argument("--config_in",
        metavar="INPUT_CONFIGURATION_FILE",
        type=str,
        required=False,
        help="Input Gromos-format configuration file")

solvent_groups.add_argument("--num_solvent",
        metavar="N",
        type=int,
        required=False,
        default=0,
        help="Number of solvent molecules to include in output topology. "
                +"(Default: 0)")

parser.add_argument("--config_out",
        metavar="OUTPUT_CONFIGURATION_FILE",
        type=str,
        required=False,
        help="Output Amber-format configuration file")

parser.add_argument("--solvent_resname",
        metavar="SOLVENT_RESIDUE_NAME",
        type=str,
        required=False,
        default="SOL",
        help="The name of the solvent residues. "
              +"Maximum 4 characters. (Default: SOL)")

args = parser.parse_args()

if len(args.solvent_resname)>4:
    sys.stderr.write(
            "ERROR: Solvent residue name cannot be longer than 4 characers.")
    exit(1)

if args.solvent_resname == "":
    sys.stderr.write(
            "ERROR: Solvent residue name cannot be an empty string.")
    exit(1)

if args.config_in == None and not args.config_out == None:
    sys.stderr.write("WARNING: Cannot write configuration file when no input "
                     +"configuration file has been supplied.")
    args.config_out = None

topology = Topology(sys.stdin)

if not args.config_in == None:
    with open(args.config_in) as f: config = Configuration(f)
    config.gather_molecules(topology)
    num_atoms = len(config.positions)
    num_solvent_molecules = int(  (num_atoms - len(topology.atoms) )
            / len(topology.solvent_atoms)   )
else:
    num_solvent_molecules = args.num_solvent

topology.add_solvent(num_solvent_molecules, args.solvent_resname)

AmberTopologyWriter(topology).write(sys.stdout)

if not args.config_out == None:
    with open(args.config_out, "w") as f:
        AmberConfigurationWriter(config).write(f)

exit(0)


#!/usr/bin/env python

import sys
from lib.Topology import Topology
from lib.Configuration import Configuration
from lib.AmberTopologyWriter import AmberTopologyWriter
from lib.AmberConfigurationWriter import AmberConfigurationWriter
import argparse

parser = argparse.ArgumentParser(
        description="Convert Gromos simulation inputs to Amber inputs.",
        #allow_abbrev=False
        )
 
#solvent_groups = parser.add_mutually_exclusive_group()

parser.add_argument("--config_in",
        metavar="INPUT_CONFIGURATION_FILE",
        type=str,
        required=True,
        help="Input Gromos-format configuration file")

parser.add_argument("--config_out",
        metavar="OUTPUT_CONFIGURATION_FILE",
        type=str,
        required=False,
        help="Output Amber-format configuration file")

args = parser.parse_args()

topology = Topology(sys.stdin)

if not args.config_in == None:
    with open(args.config_in) as f: config = Configuration(f)
    config.gather_molecules(topology)
    num_atoms = len(config.positions)
    num_solvent_molecules = int(  (num_atoms - len(topology.atoms) )
            / len(topology.solvent_atoms)   )

    topology.add_solvent(num_solvent_molecules)

    if not args.config_out == None:
        with open(args.config_out, "w") as f:
            AmberConfigurationWriter(config).write(f)

AmberTopologyWriter(topology).write(sys.stdout)

exit(0)


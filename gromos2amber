#!/usr/bin/env python3

import sys
from gromos2amber import gromos2amber
import argparse

parser = argparse.ArgumentParser(
        description="Convert Gromos simulation inputs to Amber inputs.",
        allow_abbrev=False
        )
 
solvent_groups = parser.add_mutually_exclusive_group()

solvent_groups.add_argument("--config_in",
        metavar="INPUT_CONFIGURATION_FILE",
        type=str,
        required=False,
        help="Input Gromos-format configuration file")

solvent_groups.add_argument("--num_solvent",
        metavar="N",
        type=int,
        required=False,
        default=0,
        help="Number of solvent molecules to include in output topology. "
                +"(Default: 0)")

parser.add_argument("--config_out",
        metavar="OUTPUT_CONFIGURATION_FILE",
        type=str,
        required=False,
        help="Output Amber-format configuration file")

parser.add_argument("--solvent_resname",
        metavar="SOLVENT_RESIDUE_NAME",
        type=str,
        required=False,
        default="SOL",
        help="The name of the solvent residues. "
              +"Maximum 4 characters. (Default: SOL)")

args = parser.parse_args()

if args.config_in == None and not args.config_out == None:
    sys.stderr.write("WARNING: Cannot write configuration file when no input "
                     +"configuration file has been supplied.")
    args.config_out = None

cin = open(args.config_in ) if not args.config_in == None else None
cout = open(args.config_out, "w" ) if not args.config_out == None else None
try:
    gromos2amber(sys.stdin, sys.stdout,
            config_in=cin, config_out = cout,
            solvent_resname = args.solvent_resname,
            num_solvent = args.num_solvent)
except:
    raise
finally:
    cin.close()  if not cin == None else None
    cout.close() if not cin == None else None

exit(0)

